import{_ as e,c as l,a2 as i,o as t}from"./chunks/framework.DPDg7N6I.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/css/Box.md","filePath":"pages/css/Box.md"}'),o={name:"pages/css/Box.md"};function s(r,a,n,h,c,p){return t(),l("div",null,a[0]||(a[0]=[i(`<h2 id="concept" tabindex="-1">Concept <a class="header-anchor" href="#concept" aria-label="Permalink to &quot;Concept&quot;">​</a></h2><h3 id="out-of-flow" tabindex="-1">out of flow <a class="header-anchor" href="#out-of-flow" aria-label="Permalink to &quot;out of flow&quot;">​</a></h3><ul><li>floated</li><li>absolutely</li><li>root element</li></ul><h2 id="box-model" tabindex="-1">Box Model <a class="header-anchor" href="#box-model" aria-label="Permalink to &quot;Box Model&quot;">​</a></h2><p>在我们现实生活中，描述一个矩形直接用宽和高即可。但是在 CSS 中主要通过四个部分来描述，分别为：</p><ul><li>margin --&gt; margin box</li><li>border --&gt; border box</li><li>padding --&gt; padding box</li><li>content --&gt; content box</li></ul><h3 id="计算方式" tabindex="-1">计算方式 <a class="header-anchor" href="#计算方式" aria-label="Permalink to &quot;计算方式&quot;">​</a></h3><p>一般来说，默认的盒模型实际占用空间计算模式为：</p><ul><li><p>水平空间大小 = margin(左右) + border(左右) + padding(左右) + width</p></li><li><p>垂直空间大小 = margin(上下) +border(上下) + padding(上下) + height</p></li></ul><p><strong>实际大小：</strong></p><ul><li>空间大小 - margin</li></ul><div class="warning custom-block"><p class="custom-block-title">Outline</p><p><code>outline</code> 属性不属于盒模型部分，它不占据空间大小，目前来说使用很少，大概了解即可。</p></div><h2 id="box-type" tabindex="-1">Box Type <a class="header-anchor" href="#box-type" aria-label="Permalink to &quot;Box Type&quot;">​</a></h2><h3 id="block-level-elements-and-block-boxes" tabindex="-1">Block-level elements and block boxes <a class="header-anchor" href="#block-level-elements-and-block-boxes" aria-label="Permalink to &quot;Block-level elements and block boxes&quot;">​</a></h3><p><strong><em>Block-level elements</em></strong> – are elements which generate a block-level principal box.</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;block&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; // &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list-item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39; &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Block-level boxes</strong> are boxes that participate in a <code>block formatting context</code>.</p><h2 id="格式化上下文" tabindex="-1">格式化上下文 <a class="header-anchor" href="#格式化上下文" aria-label="Permalink to &quot;格式化上下文&quot;">​</a></h2><h3 id="block-formatting-contexts" tabindex="-1">Block formatting contexts <a class="header-anchor" href="#block-formatting-contexts" aria-label="Permalink to &quot;Block formatting contexts&quot;">​</a></h3><ul><li>BFC</li></ul><p>In a block formatting context, boxes are laid out one after the other, vertically.</p><h4 id="bfc-的作用" tabindex="-1">BFC 的作用 <a class="header-anchor" href="#bfc-的作用" aria-label="Permalink to &quot;BFC 的作用&quot;">​</a></h4><ul><li>两列布局</li><li>通过使父元素 bfc 化，清楚内部浮动</li><li>通过使元素处于不同的 bfc 布局中，防止 margin 合并</li><li>包裹浮动的元素和 margin，使内部元素不影响元素本身的 margin 和其他的元素的布局</li></ul><h4 id="bfc-的形成" tabindex="-1">BFC 的形成 <a class="header-anchor" href="#bfc-的形成" aria-label="Permalink to &quot;BFC 的形成&quot;">​</a></h4><ul><li>根元素，即 HTML 元素</li><li>float 的值不为 none</li><li>overflow 的值不为 visible</li><li>display 的值为 inline-block、table-cell、table-caption</li><li>position 的值为 absolute 或 fixed</li></ul><h2 id="视觉格式化模型" tabindex="-1">视觉格式化模型 <a class="header-anchor" href="#视觉格式化模型" aria-label="Permalink to &quot;视觉格式化模型&quot;">​</a></h2><h2 id="collapsing-margins-margin-塌陷" tabindex="-1">Collapsing margins (margin 塌陷) <a class="header-anchor" href="#collapsing-margins-margin-塌陷" aria-label="Permalink to &quot;Collapsing margins (margin 塌陷)&quot;">​</a></h2><p>在 CSS 中，两个或多个框的相邻边距(可能是兄弟框，也可能不是兄弟框)可以组合成一个边距。以这种方式合并的折叠称为坍塌，由此产生的合并 margin 称为 margin 坍塌。</p><p>相邻的垂直边距坍塌，除非</p><ul><li>根元素不会坍塌</li><li>如果一个元素的上下边距有个浮动元素相邻，它的边界与相邻的兄弟块的边界一起坍塌，但是产生的边界不会与父块的底部边界一起坍塌。<a href="http://test.weasyprint.org/suite-css21/chapter10/section18/test19/" target="_blank" rel="noreferrer">http://test.weasyprint.org/suite-css21/chapter10/section18/test19/</a></li><li>如果具有非零计算<code>min-height</code>和<code>auto</code> computed <code>height</code>的盒子的顶部边距与其最后一个子元素的底部边距折叠，则子元素的底部边距不会与父元素的底部边距折叠。 <code>eg. demo/css/1.html</code> <a href="https://www.brunildo.org/test/collmempty.html" target="_blank" rel="noreferrer">https://www.brunildo.org/test/collmempty.html</a></li></ul><p>发生折叠规则：</p><ul><li>边距折叠只会发生在上下边距，左右边距是不会发生折叠的</li><li>边距折叠只发生邻接的上下边距中，也即兄弟节点或者父子节点</li><li>发生边距折叠的两个节点必须同处于一个 bfc 布局中</li><li>发生边距折叠的两个父子节点没有 border 或者 padding 隔开</li><li>只有普通文档流中块框的垂直外边距才会发生外边距合并，行内框、浮动框- 或绝对定位之间的外边距不会合并。</li></ul><h2 id="div-里一个图片宽高和-div-不同原因" tabindex="-1">div 里一个图片宽高和 div 不同原因 <a class="header-anchor" href="#div-里一个图片宽高和-div-不同原因" aria-label="Permalink to &quot;div 里一个图片宽高和 div 不同原因&quot;">​</a></h2><p>img 标签是 inline replaced 元素，replaced 可以让他设置宽高等。inline 在垂直方向默认 vertical-align 为 baseline</p><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><p><a href="https://tech.youzan.com/css-margin-collapse/" target="_blank" rel="noreferrer">https://tech.youzan.com/css-margin-collapse/</a></p><p><a href="http://layout.imweb.io/article/box-type.html" target="_blank" rel="noreferrer">http://layout.imweb.io/article/box-type.html</a></p><p><a href="https://www.w3.org/TR/CSS22/box.html" target="_blank" rel="noreferrer">https://www.w3.org/TR/CSS22/box.html</a></p>`,38)]))}const g=e(o,[["render",s]]);export{b as __pageData,g as default};
