import{_ as s,c as n,a2 as e,o as t}from"./chunks/framework.DPDg7N6I.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/error/Linux.md","filePath":"pages/error/Linux.md"}'),p={name:"pages/error/Linux.md"};function i(l,a,o,c,d,h){return t(),n("div",null,a[0]||(a[0]=[e(`<h2 id="宝塔-linux-启动-tomcat-jsvc-找不到-md" tabindex="-1">宝塔 linux 启动 tomcat jsvc 找不到.md <a class="header-anchor" href="#宝塔-linux-启动-tomcat-jsvc-找不到-md" aria-label="Permalink to &quot;宝塔 linux 启动 tomcat jsvc 找不到.md&quot;">​</a></h2><h3 id="_1-设置-java-home" tabindex="-1">1：设置 JAVA_HOME <a class="header-anchor" href="#_1-设置-java-home" aria-label="Permalink to &quot;1：设置 JAVA_HOME&quot;">​</a></h3><h4 id="一-找到-java-安装目录" tabindex="-1">（一）找到 JAVA 安装目录 <a class="header-anchor" href="#一-找到-java-安装目录" aria-label="Permalink to &quot;（一）找到 JAVA 安装目录&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ls -l $(which java)</span></span>
<span class="line"><span>which java</span></span></code></pre></div><p>如果显示的是 <code>/usr/bin/java</code> 请执行下面步骤</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ls -lr /usr/bin/java</span></span></code></pre></div><p>输出应为：<code>/usr/bin/java -&gt; /etc/alternatives/java</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ls -lrt /etc/alternatives/java</span></span></code></pre></div><p>输出：<code>/etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-11.0.3.7-0.el7_6.aarch64/jre/bin/java</code></p><p>上面的<code>/usr/lib/jvm/java-11-openjdk-11.0.3.7-0.el7_6.aarch64</code>就是 JAVA 的安装路径</p><h4 id="二-设置" tabindex="-1">（二）设置 <a class="header-anchor" href="#二-设置" aria-label="Permalink to &quot;（二）设置&quot;">​</a></h4><p>1）：编辑环境变量的配置文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vi /etc/profile</span></span></code></pre></div><p>2）：在文件底部加入以下配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.3.7-0.el7_6.aarch64</span></span>
<span class="line"><span>export JRE_HOME=$JAVA_HOME/jre</span></span>
<span class="line"><span>export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span></span>
<span class="line"><span>export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span></span></code></pre></div><p>3）：刷新配置，使其生效</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>source /etc/profile</span></span></code></pre></div><p>4）：测试配置结果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo $JAVA_HOME</span></span></code></pre></div><hr><h2 id="centos7-中使用-jsvc-启动-tomcat-daemon-模式" tabindex="-1">CentOS7 中使用 jsvc 启动 tomcat(daemon 模式) <a class="header-anchor" href="#centos7-中使用-jsvc-启动-tomcat-daemon-模式" aria-label="Permalink to &quot;CentOS7 中使用 jsvc 启动 tomcat(daemon 模式)&quot;">​</a></h2><blockquote><p>在生产中，tomcat 应该以 daemon 的模式运行，而且如果需要以普通用户的身份启动 tomcat，那么就不能使用 1024 以下的端口，这是 Liunx 系统的限制，只有 root 用户才能使用小于 1024 的端口。那么该如何将 tomcat 配置成服务呢？接下来，我们就来聊一聊 jsvc 这个东东。 jsvc 是什么，简单的讲，它就是一个 C 程序，是 tomcat 发行版中自带的一套代码，路径在 tomcat/bin/commons-daemon-native.tar.gz 中。有了 jsvc，我们就可以简单的定制 tomcat 的启动脚本使 tomcat 成为服务，指定 tomcat 运行时的用户和组，还可以定制一些 jvm 的参数等等，废话不多说，下面开始实战配置：</p></blockquote><p>###（一）安装 jsvc： 进入 tomcat 下面的 bin 目录：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//http://commons.apache.org/proper/commons-daemon/download_daemon.cgi下载地址</span></span>
<span class="line"><span>tar xf commons-daemon-native.tar.gz</span></span>
<span class="line"><span>cd commons-daemon-1.0.15-native-src/unix/</span></span>
<span class="line"><span>./configure --with-java=$JAVA_HOME</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>*** All done ***</span></span>
<span class="line"><span>Now you can issue &quot;make&quot;</span></span>
<span class="line"><span>[root@tomcat unix]# make</span></span></code></pre></div><p>如果出错</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//错误信息：linux  jni_md.h: No such file or directory</span></span>
<span class="line"><span>find / -name jni_md.h 2&gt; /dev/null</span></span>
<span class="line"><span>ln -s /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.aarch64/include/linux/jni_md.h /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.aarch64/include/jni_md.h</span></span></code></pre></div><p>编译完成后，会在当前文件夹生成一个 jsvc 的文件，将它拷贝到 tomcat/bin/下,</p><p>bin 目录下有个 daemon.sh，这个是 tomcat 服务的启动脚本，宝塔 linux 已经存在于/etc/init.d/下,若不存在，创建文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span># chkconfig: 2345 55 25</span></span>
<span class="line"><span># description: tomcat Service</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### BEGIN INIT INFO</span></span>
<span class="line"><span># Provides:          tomcat</span></span>
<span class="line"><span># Required-Start:</span></span>
<span class="line"><span># Required-Stop:</span></span>
<span class="line"><span># Default-Start:     2 3 4 5</span></span>
<span class="line"><span># Default-Stop:      0 1 6</span></span>
<span class="line"><span># Short-Description: starts tomcat</span></span>
<span class="line"><span># Description:       starts the tomcat</span></span>
<span class="line"><span>### END INIT INFO</span></span>
<span class="line"><span>path=/www/server/tomcat/bin</span></span>
<span class="line"><span>cd $path</span></span>
<span class="line"><span>bash daemon.sh $1</span></span></code></pre></div><p>添加服务：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>chkconfig --add tomcat</span></span>
<span class="line"><span>chkconfig --list tomcat</span></span></code></pre></div><p>启动服务：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>service tomcat start</span></span>
<span class="line"><span>netstat -tnlp</span></span></code></pre></div><h3 id="can-not-locale-java-home" tabindex="-1">can not locale JAVA HOME <a class="header-anchor" href="#can-not-locale-java-home" aria-label="Permalink to &quot;can not locale JAVA HOME&quot;">​</a></h3><p>编辑 tomcat 目录下的 daemon.sh 将 JAVA_HOME=部分的 jdk 换成上边环境变量的 jdk 路径</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>test &quot;.$TOMCAT_USER&quot; = . &amp;&amp; TOMCAT_USER=www</span></span>
<span class="line"><span># Set JAVA_HOME to working JDK or JRE</span></span>
<span class="line"><span>JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.252.b09-2.el7_8.arm</span></span></code></pre></div><p>至此，宝塔 linux 就可以正常运行 tomcat 了</p><h2 id="ssh" tabindex="-1">ssh <a class="header-anchor" href="#ssh" aria-label="Permalink to &quot;ssh&quot;">​</a></h2><h3 id="remote-host-identification-has-changed" tabindex="-1">REMOTE HOST IDENTIFICATION HAS CHANGED <a class="header-anchor" href="#remote-host-identification-has-changed" aria-label="Permalink to &quot;REMOTE HOST IDENTIFICATION HAS CHANGED&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ssh-keygen -R root@Ip // 重新ssh连接</span></span></code></pre></div><ul><li>或者删除 .ssh/know_hosts 里 ip 相关的 key</li></ul><h2 id="redis-软件配置文件修改密码以后无法在宝塔-linux-面板操作" tabindex="-1">redis 软件配置文件修改密码以后无法在宝塔 linux 面板操作 <a class="header-anchor" href="#redis-软件配置文件修改密码以后无法在宝塔-linux-面板操作" aria-label="Permalink to &quot;redis 软件配置文件修改密码以后无法在宝塔 linux 面板操作&quot;">​</a></h2><p>ssh root 用户连接服务器以后，执行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pkill -9 redis</span></span></code></pre></div><p>然后在宝塔 linux 面板进行重启就好了</p>`,45)]))}const v=s(p,[["render",i]]);export{u as __pageData,v as default};
